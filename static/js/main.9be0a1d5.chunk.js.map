{"version":3,"sources":["TimerInput.tsx","Timer.tsx","StartButton.tsx","PauseButton.tsx","ResumeButton.tsx","StopButton.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["TimerInput","styled","className","minutes","handleChange","disabled","type","min","value","onChange","required","Timer","seconds","style","fontSize","StartButton","handleClick","onClick","PauseButton","props","css","visible","ResumeButton","StopButton","App","useState","minutesToStartWith","setMinutesToStartWith","setMinutes","setSeconds","countDownInProgress","setCountDownInProgress","countDownIsPaused","setCountDownIsPaused","secondsRemaining","setSecondsRemaining","showPauseButton","showResumeButton","useEffect","minutesNumber","Math","floor","secondsNumber","secondsString","String","minutesString","timer","setInterval","tick","clearInterval","stopCountDown","event","minutesToSet","newMinutes","target","Number","time","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yWAOA,IAiCeA,EAPIC,aA1BmC,SAAC,GAAD,IACpDC,EADoD,EACpDA,UACAC,EAFoD,EAEpDA,QACAC,EAHoD,EAGpDA,aACAC,EAJoD,EAIpDA,SAJoD,OAMpD,mBAAKH,UAAWA,GACd,iDACA,qBACEI,KAAK,SACLC,IAAI,IACJF,SAAUA,EACVG,MAAOL,EACPM,SAAUL,EACVM,UAAQ,OAYKT,CAAH,KChBDU,EAbqB,SAAC,GAAD,IAAGR,EAAH,EAAGA,QAASS,EAAZ,EAAYA,QAAZ,OAClC,6BACE,wBAAIC,MAAO,CAAEC,SAAU,MACpBX,EADH,IACaS,K,yICAjB,IAsBeG,EARKd,aAdoC,SAAC,GAAD,IACtDC,EADsD,EACtDA,UACAc,EAFsD,EAEtDA,YAFsD,OAItD,mBAAKd,UAAWA,GACd,sBAAQe,QAASD,GAAjB,YASgBf,CAAH,K,uOCdjB,IA2BeiB,EARKjB,aAdoC,SAAC,GAAD,IACtDC,EADsD,EACtDA,UACAc,EAFsD,EAEtDA,YAFsD,OAItD,mBAAKd,UAAWA,GACd,sBAAQe,QAASD,GAAjB,YASgBf,CAAH,KAnBD,SAACkB,GAAD,OACdC,YADe,IAEFD,EAAME,QAAU,eAAiB,W,uOCFhD,IA4BeC,EATMrB,aAdqC,SAAC,GAAD,IACxDC,EADwD,EACxDA,UACAc,EAFwD,EAExDA,YAFwD,OAIxD,mBAAKd,UAAWA,GACd,sBAAQe,QAASD,GAAjB,aASiBf,CAAH,KAnBF,SAACkB,GAAD,OACdC,YADe,IAEFD,EAAME,QAAU,eAAiB,W,8JCFhD,IAuBeE,EATItB,aAdmC,SAAC,GAAD,IACpDC,EADoD,EACpDA,UACAc,EAFoD,EAEpDA,YAFoD,OAIpD,mBAAKd,UAAWA,GACd,sBAAQe,QAASD,GAAjB,WASef,CAAH,K,8FCJhB,IA+HeuB,EAJHvB,aArH4B,SAACkB,GAAqB,IACpDjB,EAAciB,EAAdjB,UADmD,EAEPuB,mBAP9B,MAKqC,mBAEpDC,EAFoD,KAEhCC,EAFgC,OAG7BF,mBARR,MAKqC,mBAGpDtB,EAHoD,KAG3CyB,EAH2C,OAI7BH,mBAVX,MAMwC,mBAIpDb,EAJoD,KAI3CiB,EAJ2C,OAKLJ,mBARlB,OAGuB,mBAKpDK,EALoD,KAK/BC,EAL+B,OAQTN,mBAVhB,OAEyB,mBAQpDO,EARoD,KAQjCC,EARiC,OAWXR,mBAAS,GAXE,mBAWpDS,EAXoD,KAWlCC,EAXkC,KAarDC,EAAkBN,IAAwBE,EAC1CK,EAAmBP,GAAuBE,EAmBhDM,qBAAU,WACR,GAAKR,IAAuBE,EAA5B,CAIA,IAAMO,EAAgBC,KAAKC,MAAMP,EAAmB,IAC9CQ,EAAgBR,EAAmC,GAAhBK,EAGrCI,EAAgBC,OAAOF,GACvBA,EAAgB,KAClBC,EAAa,WAAOA,IAGtB,IAAIE,EAAgBD,OAAOL,GAQ3B,GANIA,EAAgB,KAClBM,EAAa,WAAOA,IAEtBjB,EAAWiB,GACXhB,EAAWc,GAEPb,GAAuBI,EAAmB,EAAG,CAC/C,IAAMY,EAAQC,YAAYC,EAAM,KAChC,OAAO,kBAAMC,cAAcH,IAE3BI,OAED,CAACpB,EAAqBE,EAAmBE,IAE5C,IAAMc,EAAO,WACXb,EAAoBD,EAAmB,IAkBnCgB,EAAgB,WACpBf,EAAoB,GACpBP,EAAWF,GACXG,EA3FiB,MA4FjBE,EAzFkC,OA0FlCE,EAzFgC,QA4FlC,OACE,mBAAK/B,UAAWA,GACd,YAAC,EAAD,CACEA,UAAWA,EACXC,QAASuB,EACTtB,aA/Ee,SAAC+C,GACpB,IAEIC,EADEC,EADeF,EAAMG,OACK9C,MAI9B4C,EADEG,OAAOF,GAAc,GACX,WAAOA,GAEJA,EAGjB1B,EAAsByB,GACtBxB,EAAWwB,IAoEP/C,SAAUyB,IAEZ,YAAC,EAAD,CAAO3B,QAASA,EAASS,QAASA,IAClC,uBACE,YAAC,EAAD,CAAaV,UAAWA,EAAWc,YAjClB,WACrBe,GAAuB,GACvB,IAAMyB,EAAOD,OAAOpD,GAEpBgC,EADmC,GAAPqB,MA+BxB,YAAC,EAAD,CACEtD,UAAWA,EACXmB,QAASe,EACTpB,YA9Be,WACrBiB,GAAqB,MA+BjB,YAAC,EAAD,CACE/B,UAAWA,EACXmB,QAASgB,EACTrB,YA/BgB,WACtBiB,GAAqB,MAgCjB,YAAC,EAAD,CAAY/B,UAAWA,EAAWc,YAAakC,QAM3CjD,CAAH,KChIWwD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,CAAK7D,UAAU,QAAU8D,SAASC,eAAe,SDkI3D,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.9be0a1d5.chunk.js","sourcesContent":["/** @jsx jsx */\nimport React from 'react';\nimport { jsx } from '@emotion/react';\nimport styled from '@emotion/styled';\nimport PropTypes from 'prop-types';\nimport TimerInputProps from './TimerInputProps';\n\nconst UnstyledTimerInput: React.FC<TimerInputProps> = ({\n  className,\n  minutes,\n  handleChange,\n  disabled,\n}) => (\n  <div className={className}>\n    <h3>Input your desired time</h3>\n    <input\n      type=\"number\"\n      min=\"0\"\n      disabled={disabled}\n      value={minutes}\n      onChange={handleChange}\n      required\n    />\n  </div>\n);\n\nUnstyledTimerInput.propTypes = {\n  className: PropTypes.string.isRequired,\n  minutes: PropTypes.string.isRequired,\n  handleChange: PropTypes.func.isRequired,\n  disabled: PropTypes.bool.isRequired,\n};\n\nconst TimerInput = styled(UnstyledTimerInput)`\n  input {\n    font-size: 2em;\n    width: 2em;\n  }\n`;\n\nexport default TimerInput;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport TimerProps from './TimerProps';\n\nconst Timer: React.FC<TimerProps> = ({ minutes, seconds }) => (\n  <div>\n    <h1 style={{ fontSize: 100 }}>\n      {minutes}:{seconds}\n    </h1>\n  </div>\n);\n\nTimer.propTypes = {\n  minutes: PropTypes.string.isRequired,\n  seconds: PropTypes.string.isRequired,\n};\n\nexport default Timer;\n","/** @jsx jsx */\nimport { jsx } from '@emotion/react';\nimport styled from '@emotion/styled';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport StartButtonProps from './StartButtonProps';\n\nconst UnstyledStartButton: React.FC<StartButtonProps> = ({\n  className,\n  handleClick,\n}) => (\n  <div className={className}>\n    <button onClick={handleClick}>Start</button>\n  </div>\n);\n\nUnstyledStartButton.propTypes = {\n  className: PropTypes.string.isRequired,\n  handleClick: PropTypes.func.isRequired,\n};\n\nconst StartButton = styled(UnstyledStartButton)`\n  display: inline-block;\n\n  button {\n    font-size: 3em;\n  }\n`;\n\nexport default StartButton;\n","/** @jsx jsx */\nimport React from 'react';\nimport { jsx, css, SerializedStyles } from '@emotion/react';\nimport styled from '@emotion/styled';\nimport PropTypes from 'prop-types';\nimport PauseButtonProps from './PauseButtonProps';\n\nconst display = (props: PauseButtonProps): SerializedStyles =>\n  css`\n    display: ${props.visible ? 'inline-block' : 'none'};\n  `;\n\nconst UnstyledPauseButton: React.FC<PauseButtonProps> = ({\n  className,\n  handleClick,\n}) => (\n  <div className={className}>\n    <button onClick={handleClick}>Pause</button>\n  </div>\n);\n\nUnstyledPauseButton.propTypes = {\n  className: PropTypes.string.isRequired,\n  handleClick: PropTypes.func.isRequired,\n};\n\nconst PauseButton = styled(UnstyledPauseButton)`\n  margin-left: 3em;\n  button {\n    font-size: 3em;\n  }\n\n  ${display}\n`;\nexport default PauseButton;\n","/** @jsx jsx */\nimport React from 'react';\nimport { jsx, css, SerializedStyles } from '@emotion/react';\nimport styled from '@emotion/styled';\nimport PropTypes from 'prop-types';\nimport ResumeButtonProps from './ResumeButtonProps';\n\nconst display = (props: ResumeButtonProps): SerializedStyles =>\n  css`\n    display: ${props.visible ? 'inline-block' : 'none'};\n  `;\n\nconst UnstyledResumeButton: React.FC<ResumeButtonProps> = ({\n  className,\n  handleClick,\n}) => (\n  <div className={className}>\n    <button onClick={handleClick}>Resume</button>\n  </div>\n);\n\nUnstyledResumeButton.propTypes = {\n  className: PropTypes.string.isRequired,\n  handleClick: PropTypes.func.isRequired,\n};\n\nconst ResumeButton = styled(UnstyledResumeButton)`\n  margin-left: 3em;\n  button {\n    font-size: 3em;\n  }\n\n  ${display}\n`;\n\nexport default ResumeButton;\n","/** @jsx jsx */\nimport React from 'react';\nimport { jsx } from '@emotion/react';\nimport styled from '@emotion/styled';\nimport PropTypes from 'prop-types';\nimport StopButtonProps from './StopButtonProps';\n\nconst UnstyledStopButton: React.FC<StopButtonProps> = ({\n  className,\n  handleClick,\n}) => (\n  <div className={className}>\n    <button onClick={handleClick}>Stop</button>\n  </div>\n);\n\nUnstyledStopButton.propTypes = {\n  className: PropTypes.string.isRequired,\n  handleClick: PropTypes.func.isRequired,\n};\n\nconst StopButton = styled(UnstyledStopButton)`\n  margin-left: 3em;\n  display: inline-block;\n\n  button {\n    font-size: 3em;\n  }\n`;\n\nexport default StopButton;\n","/** @jsx jsx */\n/*\n * Built following this tutorial and then changing it to be relevant to\n * TypeScript:\n * https://codeburst.io/lets-build-a-countdown-timer-with-react-part-1-2e7d5692d914\n */\nimport { jsx } from '@emotion/react';\nimport React, { ChangeEvent, useEffect, useState } from 'react';\nimport styled from '@emotion/styled';\nimport TimerInput from './TimerInput';\nimport Timer from './Timer';\nimport StartButton from './StartButton';\nimport PauseButton from './PauseButton';\nimport ResumeButton from './ResumeButton';\nimport StopButton from './StopButton';\nimport AppProps from './AppProps';\n\nconst DOUBLE_ZEROS = '00';\nconst INITIAL_MINUTES = '01';\nconst INITIAL_SECONDS = DOUBLE_ZEROS;\nconst INITIAL_COUNTDOWN_IN_PROGRESS = false;\nconst INITIAL_COUNTDOWN_IS_PAUSED = false;\n\nconst UnstyledApp: React.FC<AppProps> = (props: AppProps) => {\n  const { className } = props;\n  const [minutesToStartWith, setMinutesToStartWith] = useState(INITIAL_MINUTES);\n  const [minutes, setMinutes] = useState(INITIAL_MINUTES);\n  const [seconds, setSeconds] = useState(INITIAL_SECONDS);\n  const [countDownInProgress, setCountDownInProgress] = useState(\n    INITIAL_COUNTDOWN_IN_PROGRESS,\n  );\n  const [countDownIsPaused, setCountDownIsPaused] = useState(\n    INITIAL_COUNTDOWN_IS_PAUSED,\n  );\n  const [secondsRemaining, setSecondsRemaining] = useState(0);\n\n  const showPauseButton = countDownInProgress && !countDownIsPaused;\n  const showResumeButton = countDownInProgress && countDownIsPaused;\n\n  const handleChange = (event: ChangeEvent<HTMLInputElement>): void => {\n    const inputElement = event.target as HTMLInputElement;\n    const newMinutes = inputElement.value;\n    let minutesToSet;\n\n    if (Number(newMinutes) < 10) {\n      minutesToSet = `0${newMinutes}`;\n    } else {\n      minutesToSet = newMinutes;\n    }\n\n    setMinutesToStartWith(minutesToSet);\n    setMinutes(minutesToSet);\n  };\n\n  // Using timer approach from\n  // https://yizhiyue.me/2019/12/08/how-to-create-a-simple-react-countdown-timer\n  useEffect(() => {\n    if (!countDownInProgress || countDownIsPaused) {\n      return;\n    }\n\n    const minutesNumber = Math.floor(secondsRemaining / 60);\n    const secondsNumber = secondsRemaining - minutesNumber * 60;\n\n    // String conversion comes from https://stackoverflow.com/a/32607656/249218\n    let secondsString = String(secondsNumber);\n    if (secondsNumber < 10) {\n      secondsString = `0${secondsString}`;\n    }\n\n    let minutesString = String(minutesNumber);\n\n    if (minutesNumber < 10) {\n      minutesString = `0${minutesString}`;\n    }\n    setMinutes(minutesString);\n    setSeconds(secondsString);\n\n    if (countDownInProgress && secondsRemaining > 0) {\n      const timer = setInterval(tick, 1000);\n      return () => clearInterval(timer);\n    } else {\n      stopCountDown();\n    }\n  }, [countDownInProgress, countDownIsPaused, secondsRemaining]);\n\n  const tick = (): void => {\n    setSecondsRemaining(secondsRemaining - 1);\n  };\n\n  const startCountDown = (): void => {\n    setCountDownInProgress(true);\n    const time = Number(minutes);\n    const newSecondsRemaining = time * 60;\n    setSecondsRemaining(newSecondsRemaining);\n  };\n\n  const pauseCountDown = (): void => {\n    setCountDownIsPaused(true);\n  };\n\n  const resumeCountDown = (): void => {\n    setCountDownIsPaused(false);\n  };\n\n  const stopCountDown = (): void => {\n    setSecondsRemaining(0);\n    setMinutes(minutesToStartWith);\n    setSeconds(INITIAL_SECONDS);\n    setCountDownInProgress(INITIAL_COUNTDOWN_IN_PROGRESS);\n    setCountDownIsPaused(INITIAL_COUNTDOWN_IS_PAUSED);\n  };\n\n  return (\n    <div className={className}>\n      <TimerInput\n        className={className}\n        minutes={minutesToStartWith}\n        handleChange={handleChange}\n        disabled={countDownInProgress}\n      />\n      <Timer minutes={minutes} seconds={seconds} />\n      <div>\n        <StartButton className={className} handleClick={startCountDown} />\n        <PauseButton\n          className={className}\n          visible={showPauseButton}\n          handleClick={pauseCountDown}\n        />\n        <ResumeButton\n          className={className}\n          visible={showResumeButton}\n          handleClick={resumeCountDown}\n        />\n        <StopButton className={className} handleClick={stopCountDown} />\n      </div>\n    </div>\n  );\n};\n\nconst App = styled(UnstyledApp)`\n  text-align: center;\n`;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\ninterface Config {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && !contentType.includes('javascript'))\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App className=\"App\" />, document.getElementById('root'));\n\n/*\n * If you want your app to work offline and load faster, you can change\n * unregister() to register() below. Note this comes with some pitfalls.\n * Learn more about service workers: https://bit.ly/CRA-PWA\n */\nserviceWorker.unregister();\n"],"sourceRoot":""}