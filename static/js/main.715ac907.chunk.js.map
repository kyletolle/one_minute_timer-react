{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["TimerInput","style","fontSize","width","type","min","disabled","this","props","value","minutes","onChange","handleChange","required","React","Component","Timer","seconds","StartButton","display","onClick","handleClick","PauseButton","styleAttrs","marginLeft","visible","ResumeButton","StopButton","App","secondsRemaining","intervalHandle","DOUBLE_ZEROS","INITIAL_STATE","countDownInProgress","countDownIsPaused","state","bind","startCountDown","pauseCountDown","resumeCountDown","stopCountDown","tick","event","minutesToSet","newMinutes","target","Number","setState","Math","floor","stopTimer","secondsToSet","String","startTimer","time","setInterval","clearInterval","showPauseButton","showResumeButton","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.715ac907.chunk.js","sourcesContent":["// Built following this tutorial and then changing it to be relevant to TypeScript:\n// https://codeburst.io/lets-build-a-countdown-timer-with-react-part-1-2e7d5692d914\nimport React, { ChangeEvent, MouseEventHandler } from 'react';\nimport './App.css';\n\n// Found this at https://stackoverflow.com/a/14639219/249218\ntype EventCallback = (e: ChangeEvent<HTMLInputElement>) => void;\n\nexport interface TimerInputProps { \n  minutes: string,\n  handleChange: EventCallback,\n  disabled: boolean\n}\nexport interface TimerInputState { number: number }\n\nclass TimerInput extends React.Component<TimerInputProps, TimerInputState> {\n  render() {\n    return (\n      <div>\n        <h3>Input your desired time</h3>\n        <input \n          style={{ fontSize: '2em', width: '2em' }}\n          type=\"number\"\n          min=\"0\"\n          disabled={this.props.disabled}\n          value={this.props.minutes}\n          onChange={this.props.handleChange}\n          required\n        />\n      </div>\n    );\n  }\n}\n\nexport interface TimerProps {\n   minutes: string,\n  seconds: string\n}\n\nclass Timer extends React.Component<TimerProps> {\n  render() {\n    return (\n      <div>\n        <h1 style={{ fontSize: 100 }}>\n          {this.props.minutes}:{this.props.seconds}\n        </h1>\n      </div>\n    );\n  }\n}\n\nexport interface StartButtonProps {\n  handleClick: MouseEventHandler<HTMLButtonElement>\n}\n\nclass StartButton extends React.Component<StartButtonProps> {\n  render() {\n    return(\n      <div style={{ display: 'inline-block' }}>\n        <button\n          style={{fontSize: 50}}\n          onClick={this.props.handleClick}\n        >\n          Start\n        </button>\n      </div>\n    )\n  }\n}\n\nexport interface PauseButtonProps {\n  visible: boolean,\n  handleClick: MouseEventHandler<HTMLButtonElement>\n}\n\nclass PauseButton extends React.Component<PauseButtonProps> {\n  render() {\n    let styleAttrs = {\n      marginLeft: 50,\n      display: this.props.visible ? 'inline-block' : 'none'\n    }\n    return(\n      <div style={styleAttrs}>\n        <button\n          style={{ fontSize: 50 }}\n          onClick={this.props.handleClick}\n        >\n          Pause\n        </button>\n      </div>\n    )\n  }\n}\n\nexport interface ResumeButtonProps {\n  visible: boolean,\n  handleClick: MouseEventHandler<HTMLButtonElement>\n}\n\nclass ResumeButton extends React.Component<ResumeButtonProps> {\n  render() {\n    let styleAttrs = {\n      marginLeft: 50,\n      display: this.props.visible ? 'inline-block' : 'none'\n    }\n    return(\n      <div style={styleAttrs}>\n        <button\n          style={{ fontSize: 50 }}\n          onClick={this.props.handleClick}\n        >\n          Resume\n        </button>\n      </div>\n    )\n  }\n}\n\nexport interface StopButtonProps {\n  handleClick: MouseEventHandler<HTMLButtonElement>\n}\n\nclass StopButton extends React.Component<StopButtonProps> {\n  render() {\n    let styleAttrs = {\n       marginLeft: 50,\n        display: 'inline-block'\n    }\n    return(\n      <div style={styleAttrs}>\n        <button\n          style={{ fontSize: 50 }}\n          onClick={this.props.handleClick}\n        >\n          Stop\n        </button>\n      </div>\n    )\n  }\n}\n\nexport interface AppProps { }\nexport interface AppState {\n  seconds: string,\n  minutes: string,\n  countDownInProgress: boolean,\n  countDownIsPaused: boolean,\n}\n\nclass App extends React.Component<AppProps, AppState> {\n  secondsRemaining: number;\n  intervalHandle?: NodeJS.Timeout;\n\n  readonly DOUBLE_ZEROS = '00';\n  readonly INITIAL_STATE = {\n      minutes: '01',\n      seconds: this.DOUBLE_ZEROS,\n      countDownInProgress: false,\n      countDownIsPaused: false,\n  }\n\n  constructor(props: AppProps) {\n    super(props);\n\n    this.state = this.INITIAL_STATE;\n\n    this.secondsRemaining = 0;\n\n    this.handleChange = this.handleChange.bind(this);\n    this.startCountDown = this.startCountDown.bind(this);\n    this.pauseCountDown = this.pauseCountDown.bind(this);\n    this.resumeCountDown = this.resumeCountDown.bind(this);\n    this.stopCountDown = this.stopCountDown.bind(this);\n    this.tick = this.tick.bind(this);\n  }\n\n  handleChange(event: ChangeEvent<HTMLInputElement>) {\n    let inputElement = (event.target as HTMLInputElement);\n    let newMinutes = inputElement.value;\n    let minutesToSet;\n    if (Number(newMinutes) < 10) {\n      minutesToSet = \"0\" + newMinutes;\n    } else {\n      minutesToSet = newMinutes;\n    }\n    \n    this.setState({\n      minutes: minutesToSet\n    });\n  }\n\n  tick() {\n    let minutes = Math.floor(this.secondsRemaining / 60);\n    let seconds = this.secondsRemaining - (minutes * 60);\n\n    if (minutes === 0 && seconds === 0) {\n      this.stopTimer();\n    }\n\n    // String conversion comes from https://stackoverflow.com/a/32607656/249218\n    let secondsToSet = String(seconds);\n    if (seconds < 10) {\n      secondsToSet = \"0\" + secondsToSet;\n    }\n\n    let minutesToSet = String(minutes);\n    if (minutes < 10) {\n      minutesToSet = \"0\" + minutesToSet;\n    }\n\n    this.setState({\n      minutes: minutesToSet,\n      seconds: secondsToSet\n    });\n\n    this.secondsRemaining--;\n  }\n\n  startCountDown() {\n    this.setState({ countDownInProgress: true })\n    this.startTimer();\n\n    let time = Number(this.state.minutes);\n\n    this.secondsRemaining = time * 60;\n  }\n\n  pauseCountDown() {\n    this.setState({ countDownIsPaused: true })\n    this.stopTimer();\n  }\n\n  resumeCountDown() {\n    this.setState({ countDownIsPaused: false })\n    this.startTimer();\n  }\n\n  stopCountDown() {\n    this.setState({ countDownInProgress: false })\n    this.stopTimer();\n    this.setState(this.INITIAL_STATE);\n  }\n\n  private startTimer() {\n    this.intervalHandle = setInterval(this.tick, 1000);\n  }\n\n  private stopTimer() {\n    if (this.intervalHandle != null) {\n      clearInterval(this.intervalHandle);\n    }\n  }\n\n  render() {\n    let showPauseButton = this.state.countDownInProgress && !this.state.countDownIsPaused;\n    let showResumeButton = this.state.countDownInProgress && this.state.countDownIsPaused;\n\n    return (\n      <div className=\"App\">\n        <TimerInput \n          minutes={this.state.minutes}\n          handleChange={this.handleChange}\n          disabled={this.state.countDownInProgress}\n        />\n        <Timer minutes={this.state.minutes} seconds={this.state.seconds} />\n        <div>\n          <StartButton handleClick={this.startCountDown} />\n          <PauseButton\n            visible={showPauseButton}\n            handleClick={this.pauseCountDown}\n          />\n          <ResumeButton\n            visible={showResumeButton}\n            handleClick={this.resumeCountDown}\n          />\n          <StopButton handleClick={this.stopCountDown} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}