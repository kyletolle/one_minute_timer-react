{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["TimerInput","style","marginLeft","type","value","this","props","minutes","onChange","handleChange","required","React","Component","Timer","fontSize","seconds","StartButton","onClick","handleClick","App","secondsRemaining","intervalHandle","state","bind","startCountDown","tick","event","minutesToSet","target","setState","min","Math","floor","sec","String","clearInterval","setInterval","time","Number","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8QAYMA,G,uLAEF,OACE,yBAAKC,MAAO,CAAEC,WAAW,MACvB,uDACA,2BACEC,KAAK,SACLC,MAAOC,KAAKC,MAAMC,QAClBC,SAAUH,KAAKC,MAAMG,aACrBC,UAAQ,S,GATOC,IAAMC,YAqBzBC,E,iLAEF,OACE,6BACE,wBAAIZ,MAAO,CAAEa,SAAU,IAAKZ,WAAY,MACrCG,KAAKC,MAAMC,QADd,IACwBF,KAAKC,MAAMS,c,GALvBJ,IAAMC,WAgBpBI,E,iLAEF,OACE,yBAAKf,MAAO,CAAEC,WAAY,MACxB,4BAAQe,QAASZ,KAAKC,MAAMY,aAA5B,c,GAJkBP,IAAMC,WAsGjBO,E,YAjFb,WAAYb,GAAkB,IAAD,8BAC3B,4CAAMA,KAJRc,sBAG6B,IAF7BC,oBAE6B,EAG3B,EAAKC,MAAQ,CACXP,QAAS,KACTR,QAAS,IAGX,EAAKa,iBAAmB,EAExB,EAAKX,aAAe,EAAKA,aAAac,KAAlB,gBACpB,EAAKC,eAAiB,EAAKA,eAAeD,KAApB,gBACtB,EAAKE,KAAO,EAAKA,KAAKF,KAAV,gBAZe,E,0EAehBG,GACX,IAAIC,EAAgBD,EAAME,OAA4BxB,OAAS,IAC/DC,KAAKwB,SAAS,CACZtB,QAASoB,M,6BAKX,IAAIG,EAAMC,KAAKC,MAAM3B,KAAKe,iBAAmB,IACzCa,EAAM5B,KAAKe,iBAA0B,GAANU,EAGnCzB,KAAKwB,SAAS,CACZtB,QAAS2B,OAAOJ,GAChBf,QAASmB,OAAOD,KAGdA,EAAM,IACR5B,KAAKwB,SAAS,CACZd,QAAS,IAAMV,KAAKiB,MAAMP,UAI1Be,EAAM,IACRzB,KAAKwB,SAAS,CACZtB,QAAS,IAAMuB,IAIP,IAARA,GAAqB,IAARG,GACY,MAAvB5B,KAAKgB,gBACPc,cAAc9B,KAAKgB,gBAIvBhB,KAAKe,qB,uCAILf,KAAKgB,eAAiBe,YAAY/B,KAAKoB,KAAM,KAE7C,IAAIY,EAAOC,OAAOjC,KAAKiB,MAAMf,SAE7BF,KAAKe,iBAA0B,GAAPiB,I,+BAIxB,OACE,yBAAKE,UAAU,OACb,kBAAC,EAAD,CAAYhC,QAASF,KAAKiB,MAAMf,QAASE,aAAcJ,KAAKI,eAC5D,kBAAC,EAAD,CAAOF,QAASF,KAAKiB,MAAMf,QAASQ,QAASV,KAAKiB,MAAMP,UACxD,kBAAC,EAAD,CAAaG,YAAab,KAAKmB,sB,GAvErBb,IAAMC,WCrDJ4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.0e1bc899.chunk.js","sourcesContent":["import React, { ChangeEvent, MouseEventHandler } from 'react';\nimport './App.css';\n\n// Found this at https://stackoverflow.com/a/14639219/249218\ntype EventCallback = (e: ChangeEvent<HTMLInputElement>) => void;\n\nexport interface TimerInputProps { \n  minutes: string,\n  handleChange: EventCallback\n}\nexport interface TimerInputState { number: number }\n\nclass TimerInput extends React.Component<TimerInputProps, TimerInputState> {\n  render() {\n    return (\n      <div style={{ marginLeft:100 }}>\n        <h3>Input your desired time</h3>\n        <input \n          type=\"number\"\n          value={this.props.minutes}\n          onChange={this.props.handleChange}\n          required\n        />\n      </div>\n    );\n  }\n}\n\nexport interface TimerProps {\n   minutes: string,\n  seconds: string\n}\n\nclass Timer extends React.Component<TimerProps> {\n  render() {\n    return (\n      <div>\n        <h1 style={{ fontSize: 100, marginLeft: 100 }}>\n          {this.props.minutes}:{this.props.seconds}\n        </h1>\n      </div>\n    );\n  }\n}\n\nexport interface StartButtonProps {\n  handleClick: MouseEventHandler<HTMLButtonElement>\n}\n\nclass StartButton extends React.Component<StartButtonProps> {\n  render() {\n    return(\n      <div style={{ marginLeft: 100 }}>\n        <button onClick={this.props.handleClick}>Start</button>\n      </div>\n    )\n  }\n}\n\nexport interface AppProps { }\nexport interface AppState {\n  seconds: string,\n  minutes: string\n}\n\nclass App extends React.Component<AppProps, AppState> {\n\n  secondsRemaining: number;\n  intervalHandle?: NodeJS.Timeout;\n\n  constructor(props: AppProps) {\n    super(props);\n\n    this.state = {\n      seconds: '00',\n      minutes: ''\n    }\n\n    this.secondsRemaining = 0;\n\n    this.handleChange = this.handleChange.bind(this);\n    this.startCountDown = this.startCountDown.bind(this);\n    this.tick = this.tick.bind(this);\n  }\n\n  handleChange(event: ChangeEvent<HTMLInputElement>) {\n    let minutesToSet = (event.target as HTMLInputElement).value || '0';\n    this.setState({\n      minutes: minutesToSet\n    })\n  }\n\n  tick() {\n    var min = Math.floor(this.secondsRemaining / 60)\n    var sec = this.secondsRemaining - (min * 60);\n\n    // String conversion comes from https://stackoverflow.com/a/32607656/249218\n    this.setState({\n      minutes: String(min),\n      seconds: String(sec)\n    });\n\n    if (sec < 10) {\n      this.setState({\n        seconds: \"0\" + this.state.seconds,\n      });\n    }\n\n    if (min < 10) {\n      this.setState({\n        minutes: \"0\" + min,\n      });\n    }\n\n    if (min === 0 && sec === 0) {\n      if (this.intervalHandle != null) {\n        clearInterval(this.intervalHandle);\n      }\n    }\n\n    this.secondsRemaining--;\n  }\n\n  startCountDown() {\n    this.intervalHandle = setInterval(this.tick, 1000);\n\n    let time = Number(this.state.minutes);\n\n    this.secondsRemaining = time * 60;\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <TimerInput minutes={this.state.minutes} handleChange={this.handleChange} />\n        <Timer minutes={this.state.minutes} seconds={this.state.seconds} />\n        <StartButton handleClick={this.startCountDown} />\n      </div>\n    );\n  }\n}\n// const App: React.FC = () => {\n//   return (\n//     <div className=\"App\">\n//       <TimerInput />\n//       <Timer />\n//       <StartButton />\n//     </div>\n//   );\n// }\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}